# YaCy-Grid Peer configuration

# the default port of this peer
port = 8100

# if we don't force the port to be used, the peer may use alternative port numbers on it's own
port.force = true

# the grid name is used to separate different grid networks.
# Only networks with the same name connect with each other
grid.name = vsm_yacy-grid

# the access point to the mcp. These are necessary to make it possible that the
# microservices find each other several addresses can be used.
# If the primary address in this list is not used, fail-over addresses are attempted
grid.mcp.address =
#grid.mcp.address = yacy-mcp:8100
#grid.mcp.address = yacy-mcp:8100,127.0.0.1:8100

# the ftp service for a primary mcp. This value is only valid, if the local mcp does not connect to another one
grid.ftp.address = admin:admin@127.0.0.1:2121,admin:admin@brain.local:2121,admin:admin@node00.local:2121,admin:admin@searchlab.eu:2121
grid.ftp.active = false

# s3 service for asset stores
# to run a local minio s3 instance using docker, use this command to get access for the given default setting:
# docker run -d --restart unless-stopped -p 9000:9000 -p 9001:9001 --name minio -v minio-data:/data -e "MINIO_ROOT_USER=admin" -e "MINIO_ROOT_PASSWORD=12345678" quay.io/minio/minio server /data --console-address ":9001"
grid.s3.address = admin:12345678@yacygrid.127.0.0.1:9000
grid.s3.active = true

# the broker service for a primary mcp.
grid.broker.address = adminRabbitMQ:CxMLzJnuDm8NEqD3fvzdMUnGWfFv732z@rabbitmq:5672

# use lazy queues: for rabbitMQ this means, that lazy queues do not use any memory cache
grid.broker.lazy = true

# assets: local asset store. if delete is true, then assets are deleted as soon as a read process has accessed the asset
grid.assets.delete = true

# the address of the elasticsearch transport client instance(s)
grid.elasticsearch.address = 10.0.0.61:9300,10.0.0.62:9300,10.0.0.63:9300
grid.elasticsearch.clusterName = es-live

grid.elasticsearch.webIndexName = web

# limitation and throttling:
# A limit is the maximum number of entries that a queue may take. This is a configuration which is passed to
# the RabbitMQ queue initialization. If the limit is set to 0, it means no limitation.
# In case that a target queue reaches it's maximum, it will reject new entries, followed by a requeueing of already dequeued messages
# of origin queues.
grid.broker.queue.limit = 50000
# A throttling is a care-taking of the maximum number of entries in target queues. If the sum of all entries in target queues
# is approaching the throttling number, reading from the origin queues is throttled (= pauses are made, processes act slower).
# Queue limit numbers cannot be compared with trottling numbers, because queue limits denote absolute numbers of one queue
# while throttling numbers denote the sum of all entries in target queues. It should hold:
#     throttling < limit * number-of-target-queues
# But as long as throttling >= limit it could happen that a queue reaches it's limit before throttling starts. To be save, set
#     throttling < limit
# A throttling of 0 means no throttling.
grid.broker.queue.throttling = 48000

# Index names of the grid indexes:
# crawlstart : a history of all crawl starts
# crawler    : tracking of crawling progress
# query      : a history of all queries
# web        : the document search index ("web index", there)
grid.elasticsearch.indexName.crawlstart = crawlstart
grid.elasticsearch.indexName.crawler = crawler
grid.elasticsearch.indexName.query = query
grid.elasticsearch.indexName.web = web

# the following type name is an intermediate solution to migrate from elastic 6.x to 8.x
# unfortunately the current index type name is 'web' but in future elastic versions the name '_doc'
# is mandatory. We will use this setting until migration to elastic 8.x is complete and delete
# the configuration afterwards.
grid.elasticsearch.typeName = web
